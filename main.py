import asyncio
from datetime import datetime, timedelta
from getpass import getpass
from telethon import TelegramClient, functions, types, utils
from telethon.errors import SessionPasswordNeededError, ChannelInvalidError
from colorama import Fore, Style, init

init(autoreset=True)

MAX_SCHEDULED_MESSAGES = 100


async def load_or_create_session():
    """–í—ã–±–æ—Ä –º–µ–∂–¥—É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π"""
    try:
        client = TelegramClient('tg_scheduler', 0, '')
        if client.session.exists():
            choice = input(f"{Fore.YELLOW}–ù–∞–π–¥–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë? (y/n): ")
            if choice.lower() == 'y':
                await client.connect()
                return client
        return None
    except Exception as e:
        print(f"{Fore.RED}üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–∏: {e}")
        return None


async def get_scheduled_messages_count(client, entity):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        scheduled = await client.get_scheduled_messages(entity)
        return len(scheduled)
    except Exception as e:
        print(f"{Fore.YELLOW}‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {e}")
        return 0


async def choose_chat(client):
    """–í—ã–±–æ—Ä —á–∞—Ç–∞ –∏ —Ç–µ–º—ã (–ø–æ–¥—á–∞—Ç–∞)"""
    try:
        dialogs = await client.get_dialogs()
        print(f"\n{Fore.CYAN}üåÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:")
        for i, d in enumerate(dialogs, 1):
            print(f"{Fore.GREEN}[{i}]{Style.RESET_ALL} {d.name}")

        while True:
            try:
                choice = int(input(f"\n{Fore.BLUE}‚ùî –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç (1-{len(dialogs)}): "))
                entity = dialogs[choice - 1].entity
                break
            except (ValueError, IndexError):
                print(f"{Fore.RED}üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!")

        if isinstance(entity, types.Channel) and entity.forum:
            try:
                input_channel = utils.get_input_channel(entity)
                result = await client(
                    functions.channels.GetForumTopicsRequest(
                        channel=input_channel,
                        offset_date=datetime.now(),
                        offset_id=0,
                        offset_topic=0,
                        limit=100
                    )
                )
                topics = result.topics
                print(f"\n{Fore.CYAN}üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã:")
                for i, topic in enumerate(topics, 1):
                    print(f"{Fore.GREEN}[{i}]{Style.RESET_ALL} {topic.title}")

                while True:
                    try:
                        topic_choice = int(input(f"{Fore.BLUE}‚ùî –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É (1-{len(topics)}): "))
                        topic_id = topics[topic_choice - 1].id
                        return entity, topic_id
                    except (ValueError, IndexError):
                        print(f"{Fore.RED}üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!")
            except Exception as e:
                print(f"{Fore.RED}üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–º: {e}")
                return entity, None
        else:
            return entity, None

    except Exception as e:
        print(f"{Fore.RED}üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None, None


async def main():
    print(f"\n{Fore.MAGENTA}‚ö° TG Scheduler ULTIMATE v8.0{Style.RESET_ALL}")

    client = None
    try:
        client = await load_or_create_session()
        if not client:
            api_id = int(input(f"{Fore.BLUE}–í–≤–µ–¥–∏—Ç–µ API ID: "))
            api_hash = input(f"{Fore.BLUE}–í–≤–µ–¥–∏—Ç–µ API Hash: ")
            client = TelegramClient('tg_scheduler', api_id, api_hash)
            await client.start(
                phone=lambda: input(f"\n{Fore.BLUE}üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+7...): "),
                code_callback=lambda: input(f"{Fore.BLUE}üîë –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
                password=lambda: getpass(f"{Fore.BLUE}üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: "),
                max_attempts=3
            )

        if not await client.is_user_authorized():
            print(f"{Fore.RED}üö´ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
            return

        # –í—ã–±–æ—Ä —á–∞—Ç–∞
        entity, topic_id = await choose_chat(client)
        if entity is None:
            print(f"{Fore.RED}üö´ –ß–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        scheduled_count = await get_scheduled_messages_count(client, entity)
        available_slots = MAX_SCHEDULED_MESSAGES - scheduled_count
        if available_slots <= 0:
            print(f"{Fore.RED}üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ {MAX_SCHEDULED_MESSAGES} —Å–æ–æ–±—â–µ–Ω–∏–π!")
            return

        # –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π
        schedule = []
        print(f"\n{Fore.CYAN}üìù –§–æ—Ä–º–∞—Ç: —Ç–µ–∫—Å—Ç[:–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] (–ø—Ä–∏–º–µ—Ä: –Ω–æ–≤–æ—Å—Ç—å:3)")
        print(f"{Fore.YELLOW}‚ùï –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤: {available_slots}")

        while available_slots > 0:
            entry = input(f"{Fore.BLUE}‚û° –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ 'done': ").strip()
            if entry.lower() == 'done':
                if not schedule:
                    print(f"{Fore.RED}üö´ –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
                    continue
                break

            # –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–æ–¥–∞
            if ':' in entry:
                msg_part, _, count_part = entry.partition(':')
                msg = msg_part.strip()
                try:
                    count = min(int(count_part), available_slots)
                    if count <= 0:
                        raise ValueError
                except ValueError:
                    print(f"{Fore.RED}üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!")
                    continue
            else:
                msg = entry.strip()
                count = 1

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            for _ in range(count):
                if available_slots <= 0:
                    break
                schedule.append(msg)
                available_slots -= 1

            print(f"{Fore.YELLOW}‚ôª –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: {available_slots}")

        # –í–≤–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        while True:
            interval_input = input(f"{Fore.BLUE}‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–º–∏–Ω—É—Ç): ")
            try:
                interval = int(interval_input)
                if interval <= 0:
                    raise ValueError
                break
            except ValueError:
                print(f"{Fore.RED}üö´ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0!")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        start_time = datetime.now()
        for i, msg in enumerate(schedule):
            try:
                send_time = start_time + timedelta(minutes=i * interval)
                await client.send_message(
                    entity=entity,
                    message=msg,
                    schedule=send_time,
                    reply_to=topic_id if topic_id else None
                )
                print(f"{Fore.GREEN}‚úì –°–æ–æ–±—â–µ–Ω–∏–µ {i + 1} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {send_time.strftime('%H:%M')}")
            except Exception as e:
                print(f"{Fore.RED}üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {i + 1}: {e}")

    except KeyboardInterrupt:
        print(f"\n{Fore.RED}üö´ –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
    except Exception as e:
        print(f"\n{Fore.RED}üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if client:
            await client.disconnect()


if __name__ == '__main__':
    asyncio.run(main())